// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pMessageFieldNames          = builder.RawFieldNames(&PMessage{})
	pMessageRows                = strings.Join(pMessageFieldNames, ",")
	pMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(pMessageFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	pMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(pMessageFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"

	cachePaopaoPMessageIdPrefix = "cache:paopao:pMessage:id:"
)

type (
	pMessageModel interface {
		Insert(ctx context.Context, data *PMessage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PMessage, error)
		Update(ctx context.Context, data *PMessage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPMessageModel struct {
		sqlc.CachedConn
		table string
	}

	PMessage struct {
		Id             int64  `db:"id"`               // 消息通知ID
		SenderUserId   int64  `db:"sender_user_id"`   // 发送方用户ID
		ReceiverUserId int64  `db:"receiver_user_id"` // 接收方用户ID
		Type           int64  `db:"type"`             // 通知类型，1动态，2评论，3回复，4私信，99系统通知
		Brief          string `db:"brief"`            // 摘要说明
		Content        string `db:"content"`          // 详细内容
		PostId         int64  `db:"post_id"`          // 动态ID
		CommentId      int64  `db:"comment_id"`       // 评论ID
		ReplyId        int64  `db:"reply_id"`         // 回复ID
		IsRead         int64  `db:"is_read"`          // 是否已读
		CreatedOn      int64  `db:"created_on"`       // 创建时间
		ModifiedOn     int64  `db:"modified_on"`      // 修改时间
		DeletedOn      int64  `db:"deleted_on"`       // 删除时间
		IsDel          int64  `db:"is_del"`           // 是否删除 0 为未删除、1 为已删除
	}
)

func newPMessageModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPMessageModel {
	return &defaultPMessageModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`p_message`",
	}
}

func (m *defaultPMessageModel) Delete(ctx context.Context, id int64) error {
	paopaoPMessageIdKey := fmt.Sprintf("%s%v", cachePaopaoPMessageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, paopaoPMessageIdKey)
	return err
}

func (m *defaultPMessageModel) FindOne(ctx context.Context, id int64) (*PMessage, error) {
	paopaoPMessageIdKey := fmt.Sprintf("%s%v", cachePaopaoPMessageIdPrefix, id)
	var resp PMessage
	err := m.QueryRowCtx(ctx, &resp, paopaoPMessageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pMessageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPMessageModel) Insert(ctx context.Context, data *PMessage) (sql.Result, error) {
	paopaoPMessageIdKey := fmt.Sprintf("%s%v", cachePaopaoPMessageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pMessageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SenderUserId, data.ReceiverUserId, data.Type, data.Brief, data.Content, data.PostId, data.CommentId, data.ReplyId, data.IsRead, data.CreatedOn, data.ModifiedOn, data.DeletedOn, data.IsDel)
	}, paopaoPMessageIdKey)
	return ret, err
}

func (m *defaultPMessageModel) Update(ctx context.Context, data *PMessage) error {
	paopaoPMessageIdKey := fmt.Sprintf("%s%v", cachePaopaoPMessageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pMessageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SenderUserId, data.ReceiverUserId, data.Type, data.Brief, data.Content, data.PostId, data.CommentId, data.ReplyId, data.IsRead, data.CreatedOn, data.ModifiedOn, data.DeletedOn, data.IsDel, data.Id)
	}, paopaoPMessageIdKey)
	return err
}

func (m *defaultPMessageModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePaopaoPMessageIdPrefix, primary)
}

func (m *defaultPMessageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pMessageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPMessageModel) tableName() string {
	return m.table
}
