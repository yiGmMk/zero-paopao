// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pTagFieldNames          = builder.RawFieldNames(&PTag{})
	pTagRows                = strings.Join(pTagFieldNames, ",")
	pTagRowsExpectAutoSet   = strings.Join(stringx.Remove(pTagFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	pTagRowsWithPlaceHolder = strings.Join(stringx.Remove(pTagFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"
)

type (
	pTagModel interface {
		Insert(ctx context.Context, data *PTag) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PTag, error)
		FindOneByTag(ctx context.Context, tag string) (*PTag, error)
		Update(ctx context.Context, data *PTag) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPTagModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PTag struct {
		Id         int64  `db:"id"`          // 标签ID
		UserId     int64  `db:"user_id"`     // 创建者ID
		Tag        string `db:"tag"`         // 标签名
		QuoteNum   int64  `db:"quote_num"`   // 引用数
		CreatedOn  int64  `db:"created_on"`  // 创建时间
		ModifiedOn int64  `db:"modified_on"` // 修改时间
		DeletedOn  int64  `db:"deleted_on"`  // 删除时间
		IsDel      int64  `db:"is_del"`      // 是否删除 0 为未删除、1 为已删除
	}
)

func newPTagModel(conn sqlx.SqlConn) *defaultPTagModel {
	return &defaultPTagModel{
		conn:  conn,
		table: "`p_tag`",
	}
}

func (m *defaultPTagModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPTagModel) FindOne(ctx context.Context, id int64) (*PTag, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pTagRows, m.table)
	var resp PTag
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPTagModel) FindOneByTag(ctx context.Context, tag string) (*PTag, error) {
	var resp PTag
	query := fmt.Sprintf("select %s from %s where `tag` = ? limit 1", pTagRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, tag)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPTagModel) Insert(ctx context.Context, data *PTag) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, pTagRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Tag, data.QuoteNum, data.CreatedOn, data.ModifiedOn, data.DeletedOn, data.IsDel)
	return ret, err
}

func (m *defaultPTagModel) Update(ctx context.Context, newData *PTag) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pTagRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.Tag, newData.QuoteNum, newData.CreatedOn, newData.ModifiedOn, newData.DeletedOn, newData.IsDel, newData.Id)
	return err
}

func (m *defaultPTagModel) tableName() string {
	return m.table
}
