// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pUserFieldNames          = builder.RawFieldNames(&PUser{})
	pUserRows                = strings.Join(pUserFieldNames, ",")
	pUserRowsExpectAutoSet   = strings.Join(stringx.Remove(pUserFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	pUserRowsWithPlaceHolder = strings.Join(stringx.Remove(pUserFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"

	cachePaopaoPUserIdPrefix       = "cache:paopao:pUser:id:"
	cachePaopaoPUserUsernamePrefix = "cache:paopao:pUser:username:"
)

type (
	pUserModel interface {
		Insert(ctx context.Context, data *PUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PUser, error)
		FindOneByUsername(ctx context.Context, username string) (*PUser, error)
		Update(ctx context.Context, data *PUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPUserModel struct {
		sqlc.CachedConn
		table string
	}

	PUser struct {
		Id         int64  `db:"id"`          // 用户ID
		Nickname   string `db:"nickname"`    // 昵称
		Username   string `db:"username"`    // 用户名
		Phone      string `db:"phone"`       // 手机号
		Password   string `db:"password"`    // MD5密码
		Salt       string `db:"salt"`        // 盐值
		Status     int64  `db:"status"`      // 状态，1正常，2停用
		Avatar     string `db:"avatar"`      // 用户头像
		Balance    int64  `db:"balance"`     // 用户余额（分）
		IsAdmin    int64  `db:"is_admin"`    // 是否管理员
		CreatedOn  int64  `db:"created_on"`  // 创建时间
		ModifiedOn int64  `db:"modified_on"` // 修改时间
		DeletedOn  int64  `db:"deleted_on"`  // 删除时间
		IsDel      int64  `db:"is_del"`      // 是否删除 0 为未删除、1 为已删除
	}
)

func newPUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPUserModel {
	return &defaultPUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`p_user`",
	}
}

func (m *defaultPUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	paopaoPUserIdKey := fmt.Sprintf("%s%v", cachePaopaoPUserIdPrefix, id)
	paopaoPUserUsernameKey := fmt.Sprintf("%s%v", cachePaopaoPUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, paopaoPUserIdKey, paopaoPUserUsernameKey)
	return err
}

func (m *defaultPUserModel) FindOne(ctx context.Context, id int64) (*PUser, error) {
	paopaoPUserIdKey := fmt.Sprintf("%s%v", cachePaopaoPUserIdPrefix, id)
	var resp PUser
	err := m.QueryRowCtx(ctx, &resp, paopaoPUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPUserModel) FindOneByUsername(ctx context.Context, username string) (*PUser, error) {
	paopaoPUserUsernameKey := fmt.Sprintf("%s%v", cachePaopaoPUserUsernamePrefix, username)
	var resp PUser
	err := m.QueryRowIndexCtx(ctx, &resp, paopaoPUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", pUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPUserModel) Insert(ctx context.Context, data *PUser) (sql.Result, error) {
	paopaoPUserIdKey := fmt.Sprintf("%s%v", cachePaopaoPUserIdPrefix, data.Id)
	paopaoPUserUsernameKey := fmt.Sprintf("%s%v", cachePaopaoPUserUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Nickname, data.Username, data.Phone, data.Password, data.Salt, data.Status, data.Avatar, data.Balance, data.IsAdmin, data.CreatedOn, data.ModifiedOn, data.DeletedOn, data.IsDel)
	}, paopaoPUserIdKey, paopaoPUserUsernameKey)
	return ret, err
}

func (m *defaultPUserModel) Update(ctx context.Context, newData *PUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	paopaoPUserIdKey := fmt.Sprintf("%s%v", cachePaopaoPUserIdPrefix, data.Id)
	paopaoPUserUsernameKey := fmt.Sprintf("%s%v", cachePaopaoPUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Nickname, newData.Username, newData.Phone, newData.Password, newData.Salt, newData.Status, newData.Avatar, newData.Balance, newData.IsAdmin, newData.CreatedOn, newData.ModifiedOn, newData.DeletedOn, newData.IsDel, newData.Id)
	}, paopaoPUserIdKey, paopaoPUserUsernameKey)
	return err
}

func (m *defaultPUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePaopaoPUserIdPrefix, primary)
}

func (m *defaultPUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPUserModel) tableName() string {
	return m.table
}
