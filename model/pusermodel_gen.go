// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pUserFieldNames          = builder.RawFieldNames(&PUser{})
	pUserRows                = strings.Join(pUserFieldNames, ",")
	pUserRowsExpectAutoSet   = strings.Join(stringx.Remove(pUserFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	pUserRowsWithPlaceHolder = strings.Join(stringx.Remove(pUserFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"
)

type (
	pUserModel interface {
		Insert(ctx context.Context, data *PUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PUser, error)
		FindOneByUsername(ctx context.Context, username string) (*PUser, error)
		Update(ctx context.Context, data *PUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PUser struct {
		Id         int64  `db:"id"`          // 用户ID
		Nickname   string `db:"nickname"`    // 昵称
		Username   string `db:"username"`    // 用户名
		Phone      string `db:"phone"`       // 手机号
		Password   string `db:"password"`    // MD5密码
		Salt       string `db:"salt"`        // 盐值
		Status     int64  `db:"status"`      // 状态，1正常，2停用
		Avatar     string `db:"avatar"`      // 用户头像
		Balance    int64  `db:"balance"`     // 用户余额（分）
		IsAdmin    int64  `db:"is_admin"`    // 是否管理员
		CreatedOn  int64  `db:"created_on"`  // 创建时间
		ModifiedOn int64  `db:"modified_on"` // 修改时间
		DeletedOn  int64  `db:"deleted_on"`  // 删除时间
		IsDel      int64  `db:"is_del"`      // 是否删除 0 为未删除、1 为已删除
	}
)

func newPUserModel(conn sqlx.SqlConn) *defaultPUserModel {
	return &defaultPUserModel{
		conn:  conn,
		table: "`p_user`",
	}
}

func (m *defaultPUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPUserModel) FindOne(ctx context.Context, id int64) (*PUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pUserRows, m.table)
	var resp PUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPUserModel) FindOneByUsername(ctx context.Context, username string) (*PUser, error) {
	var resp PUser
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", pUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPUserModel) Insert(ctx context.Context, data *PUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Nickname, data.Username, data.Phone, data.Password, data.Salt, data.Status, data.Avatar, data.Balance, data.IsAdmin, data.CreatedOn, data.ModifiedOn, data.DeletedOn, data.IsDel)
	return ret, err
}

func (m *defaultPUserModel) Update(ctx context.Context, newData *PUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Nickname, newData.Username, newData.Phone, newData.Password, newData.Salt, newData.Status, newData.Avatar, newData.Balance, newData.IsAdmin, newData.CreatedOn, newData.ModifiedOn, newData.DeletedOn, newData.IsDel, newData.Id)
	return err
}

func (m *defaultPUserModel) tableName() string {
	return m.table
}
