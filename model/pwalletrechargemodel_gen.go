// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pWalletRechargeFieldNames          = builder.RawFieldNames(&PWalletRecharge{})
	pWalletRechargeRows                = strings.Join(pWalletRechargeFieldNames, ",")
	pWalletRechargeRowsExpectAutoSet   = strings.Join(stringx.Remove(pWalletRechargeFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	pWalletRechargeRowsWithPlaceHolder = strings.Join(stringx.Remove(pWalletRechargeFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"
)

type (
	pWalletRechargeModel interface {
		Insert(ctx context.Context, data *PWalletRecharge) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PWalletRecharge, error)
		Update(ctx context.Context, data *PWalletRecharge) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPWalletRechargeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PWalletRecharge struct {
		Id          int64  `db:"id"`           // 充值ID
		UserId      int64  `db:"user_id"`      // 用户ID
		Amount      int64  `db:"amount"`       // 充值金额
		TradeNo     string `db:"trade_no"`     // 支付宝订单号
		TradeStatus string `db:"trade_status"` // 交易状态
		CreatedOn   int64  `db:"created_on"`   // 创建时间
		ModifiedOn  int64  `db:"modified_on"`  // 修改时间
		DeletedOn   int64  `db:"deleted_on"`   // 删除时间
		IsDel       int64  `db:"is_del"`       // 是否删除 0 为未删除、1 为已删除
	}
)

func newPWalletRechargeModel(conn sqlx.SqlConn) *defaultPWalletRechargeModel {
	return &defaultPWalletRechargeModel{
		conn:  conn,
		table: "`p_wallet_recharge`",
	}
}

func (m *defaultPWalletRechargeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPWalletRechargeModel) FindOne(ctx context.Context, id int64) (*PWalletRecharge, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pWalletRechargeRows, m.table)
	var resp PWalletRecharge
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPWalletRechargeModel) Insert(ctx context.Context, data *PWalletRecharge) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, pWalletRechargeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Amount, data.TradeNo, data.TradeStatus, data.CreatedOn, data.ModifiedOn, data.DeletedOn, data.IsDel)
	return ret, err
}

func (m *defaultPWalletRechargeModel) Update(ctx context.Context, data *PWalletRecharge) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pWalletRechargeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Amount, data.TradeNo, data.TradeStatus, data.CreatedOn, data.ModifiedOn, data.DeletedOn, data.IsDel, data.Id)
	return err
}

func (m *defaultPWalletRechargeModel) tableName() string {
	return m.table
}
