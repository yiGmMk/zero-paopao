// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pCommentFieldNames          = builder.RawFieldNames(&PComment{})
	pCommentRows                = strings.Join(pCommentFieldNames, ",")
	pCommentRowsExpectAutoSet   = strings.Join(stringx.Remove(pCommentFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	pCommentRowsWithPlaceHolder = strings.Join(stringx.Remove(pCommentFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"

	cachePaopaoPCommentIdPrefix = "cache:paopao:pComment:id:"
)

type (
	pCommentModel interface {
		Insert(ctx context.Context, data *PComment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PComment, error)
		Update(ctx context.Context, data *PComment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPCommentModel struct {
		sqlc.CachedConn
		table string
	}

	PComment struct {
		Id         int64  `db:"id"`          // 评论ID
		PostId     int64  `db:"post_id"`     // POST ID
		UserId     int64  `db:"user_id"`     // 用户ID
		Ip         string `db:"ip"`          // IP地址
		IpLoc      string `db:"ip_loc"`      // IP城市地址
		CreatedOn  int64  `db:"created_on"`  // 创建时间
		ModifiedOn int64  `db:"modified_on"` // 修改时间
		DeletedOn  int64  `db:"deleted_on"`  // 删除时间
		IsDel      int64  `db:"is_del"`      // 是否删除 0 为未删除、1 为已删除
	}
)

func newPCommentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPCommentModel {
	return &defaultPCommentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`p_comment`",
	}
}

func (m *defaultPCommentModel) Delete(ctx context.Context, id int64) error {
	paopaoPCommentIdKey := fmt.Sprintf("%s%v", cachePaopaoPCommentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, paopaoPCommentIdKey)
	return err
}

func (m *defaultPCommentModel) FindOne(ctx context.Context, id int64) (*PComment, error) {
	paopaoPCommentIdKey := fmt.Sprintf("%s%v", cachePaopaoPCommentIdPrefix, id)
	var resp PComment
	err := m.QueryRowCtx(ctx, &resp, paopaoPCommentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pCommentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPCommentModel) Insert(ctx context.Context, data *PComment) (sql.Result, error) {
	paopaoPCommentIdKey := fmt.Sprintf("%s%v", cachePaopaoPCommentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, pCommentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PostId, data.UserId, data.Ip, data.IpLoc, data.CreatedOn, data.ModifiedOn, data.DeletedOn, data.IsDel)
	}, paopaoPCommentIdKey)
	return ret, err
}

func (m *defaultPCommentModel) Update(ctx context.Context, data *PComment) error {
	paopaoPCommentIdKey := fmt.Sprintf("%s%v", cachePaopaoPCommentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pCommentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PostId, data.UserId, data.Ip, data.IpLoc, data.CreatedOn, data.ModifiedOn, data.DeletedOn, data.IsDel, data.Id)
	}, paopaoPCommentIdKey)
	return err
}

func (m *defaultPCommentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePaopaoPCommentIdPrefix, primary)
}

func (m *defaultPCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pCommentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPCommentModel) tableName() string {
	return m.table
}
