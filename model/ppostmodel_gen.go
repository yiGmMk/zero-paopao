// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pPostFieldNames          = builder.RawFieldNames(&PPost{})
	pPostRows                = strings.Join(pPostFieldNames, ",")
	pPostRowsExpectAutoSet   = strings.Join(stringx.Remove(pPostFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	pPostRowsWithPlaceHolder = strings.Join(stringx.Remove(pPostFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"
)

type (
	pPostModel interface {
		Insert(ctx context.Context, data *PPost) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PPost, error)
		Update(ctx context.Context, data *PPost) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPPostModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PPost struct {
		Id              int64  `db:"id"`                // 主题ID
		UserId          int64  `db:"user_id"`           // 用户ID
		CommentCount    int64  `db:"comment_count"`     // 评论数
		CollectionCount int64  `db:"collection_count"`  // 收藏数
		UpvoteCount     int64  `db:"upvote_count"`      // 点赞数
		Visibility      int64  `db:"visibility"`        // 可见性 0公开 1私密 2好友可见
		IsTop           int64  `db:"is_top"`            // 是否置顶
		IsEssence       int64  `db:"is_essence"`        // 是否精华
		IsLock          int64  `db:"is_lock"`           // 是否锁定
		LatestRepliedOn int64  `db:"latest_replied_on"` // 最新回复时间
		Tags            string `db:"tags"`              // 标签
		AttachmentPrice int64  `db:"attachment_price"`  // 附件价格(分)
		Ip              string `db:"ip"`                // IP地址
		IpLoc           string `db:"ip_loc"`            // IP城市地址
		CreatedOn       int64  `db:"created_on"`        // 创建时间
		ModifiedOn      int64  `db:"modified_on"`       // 修改时间
		DeletedOn       int64  `db:"deleted_on"`        // 删除时间
		IsDel           int64  `db:"is_del"`            // 是否删除 0 为未删除、1 为已删除
	}
)

func newPPostModel(conn sqlx.SqlConn) *defaultPPostModel {
	return &defaultPPostModel{
		conn:  conn,
		table: "`p_post`",
	}
}

func (m *defaultPPostModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPPostModel) FindOne(ctx context.Context, id int64) (*PPost, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pPostRows, m.table)
	var resp PPost
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPPostModel) Insert(ctx context.Context, data *PPost) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pPostRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.CommentCount, data.CollectionCount, data.UpvoteCount, data.Visibility, data.IsTop, data.IsEssence, data.IsLock, data.LatestRepliedOn, data.Tags, data.AttachmentPrice, data.Ip, data.IpLoc, data.CreatedOn, data.ModifiedOn, data.DeletedOn, data.IsDel)
	return ret, err
}

func (m *defaultPPostModel) Update(ctx context.Context, data *PPost) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pPostRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.CommentCount, data.CollectionCount, data.UpvoteCount, data.Visibility, data.IsTop, data.IsEssence, data.IsLock, data.LatestRepliedOn, data.Tags, data.AttachmentPrice, data.Ip, data.IpLoc, data.CreatedOn, data.ModifiedOn, data.DeletedOn, data.IsDel, data.Id)
	return err
}

func (m *defaultPPostModel) tableName() string {
	return m.table
}
